unit uConvertGigasecond;

interface
uses
  System.SysUtils, uTimeGigasecond;

type
  TConvertGigasecond = class
    private
      function calculateTime(time: Double): Double;
      function GetSeconds(secondsInGigaseconds: double): Integer;
      function GetTotalMinutes(secondsInGigaseconds: double): Integer;
      function GetTotalHours(minutes: Integer): Integer;
      function GetMinutes(minutes: Integer): Integer;
    public
      procedure GetTimeAndDays(gigasecond: Double; var time: String; var days: Integer);
  end;

implementation

{ TTimeGigasecond }

procedure TConvertGigasecond.GetTimeAndDays(gigasecond: Double; var time: String; var days: Integer);
var
  hours, minutes, seconds: Integer;
  FormatTime: TFormatTime;
begin
  seconds := GetSeconds(gigasecond);
  minutes := GetTotalMinutes(gigasecond);

  hours := GetTotalHours(minutes);
  minutes := GetMinutes(minutes);


  days := trunc((hours / 24));
  hours := round(frac(hours / 24) * 24);

  FormatTime := TFormatTime.Create;
  try
    time := FormatTime.GetFormattedTime(hours, minutes, seconds);
  finally
    FreeAndNil(FormatTime);
  end;
end;

function TConvertGigasecond.GetSeconds(secondsInGigaseconds: double): Integer;
begin
  Result := round(frac(calculateTime(secondsInGigaseconds)) * 60);
end;

function TConvertGigasecond.GetTotalMinutes(secondsInGigaseconds: double): Integer;
begin
  Result := trunc(calculateTime(secondsInGigaseconds));
end;

function TConvertGigasecond.GetTotalHours(minutes: Integer): Integer;
begin
  Result := trunc(calculateTime(minutes));
end;

function TConvertGigasecond.GetMinutes(minutes: Integer): Integer;
begin
  Result := round(frac(calculateTime(minutes)) * 60);
end;

function TConvertGigasecond.calculateTime(time: Double): Double;
begin
  Result := time / 60;
end;

end.
